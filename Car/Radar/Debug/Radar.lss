
Radar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006c  0080006c  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad3  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab1  00000000  00000000  0000262b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001293  00000000  00000000  000030dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000715  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001268  00000000  00000000  00004df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006061  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_7>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_13>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	e3 03       	fmuls	r22, r19
  56:	ee 03       	fmulsu	r22, r22
  58:	f3 03       	fmuls	r23, r19
  5a:	f8 03       	fmulsu	r23, r16
  5c:	fd 03       	fmulsu	r23, r21
  5e:	02 04       	cpc	r0, r2
  60:	07 04       	cpc	r0, r7
  62:	0c 04       	cpc	r0, r12

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 ec       	ldi	r30, 0xC2	; 194
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	ac e6       	ldi	r26, 0x6C	; 108
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ac 37       	cpi	r26, 0x7C	; 124
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 34 02 	call	0x468	; 0x468 <main>
  9a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <app_init>:
u8_t counterRx = 0;

void app_init(void)
{
	
	UART_init();
  a2:	0e 94 43 04 	call	0x886	; 0x886 <UART_init>
	LCD_Init();
  a6:	0e 94 44 01 	call	0x288	; 0x288 <LCD_Init>
	TIMER1_3secDelay(&Timer1APP);
  aa:	87 e7       	ldi	r24, 0x77	; 119
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 2b 04 	call	0x856	; 0x856 <TIMER1_3secDelay>
	sei();
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <app_start>:
}


void app_start(void)
{
  b6:	08 95       	ret

000000b8 <__vector_7>:
}

ISR(TIMER1_COMPA)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	cf 93       	push	r28
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	LCD_sendCommand(LCD_COM_CLEAR);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
	LCD_GOTO(0,0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 21 02 	call	0x442	; 0x442 <LCD_GOTO>
	LCD_writeString("Distance : ");
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_writeString>
	LCD_GOTO(1,0);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 21 02 	call	0x442	; 0x442 <LCD_GOTO>
	for(u8_t i = 0; i < 9; i++)
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	0d c0       	rjmp	.+26     	; 0x118 <__vector_7+0x60>
	{
		if(Distance[i] == 'm')
  fe:	ec 2f       	mov	r30, r28
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e3 59       	subi	r30, 0x93	; 147
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	8d 36       	cpi	r24, 0x6D	; 109
 10a:	19 f4       	brne	.+6      	; 0x112 <__vector_7+0x5a>
		{
			LCD_writeChar(Distance[i]);
 10c:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_writeChar>
			break;
 110:	05 c0       	rjmp	.+10     	; 0x11c <__vector_7+0x64>
		}
		LCD_writeChar(Distance[i]);
 112:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_writeChar>
{
	LCD_sendCommand(LCD_COM_CLEAR);
	LCD_GOTO(0,0);
	LCD_writeString("Distance : ");
	LCD_GOTO(1,0);
	for(u8_t i = 0; i < 9; i++)
 116:	cf 5f       	subi	r28, 0xFF	; 255
 118:	c9 30       	cpi	r28, 0x09	; 9
 11a:	88 f3       	brcs	.-30     	; 0xfe <__vector_7+0x46>
			break;
		}
		LCD_writeChar(Distance[i]);
		
	}
	TIMER1_Reset();
 11c:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER1_Reset>
	TIMER1_Flag_Reset(&Timer1APP);
 120:	87 e7       	ldi	r24, 0x77	; 119
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 15 04 	call	0x82a	; 0x82a <TIMER1_Flag_Reset>
	TIMER1_start(&Timer1APP,23438);
 128:	4e e8       	ldi	r20, 0x8E	; 142
 12a:	5b e5       	ldi	r21, 0x5B	; 91
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	87 e7       	ldi	r24, 0x77	; 119
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER1_start>
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	cf 91       	pop	r28
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_13>:

ISR(USART_RXC)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	Distance[counterRx] = UDR;
 170:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 174:	ae 2f       	mov	r26, r30
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	8c b1       	in	r24, 0x0c	; 12
 17a:	a3 59       	subi	r26, 0x93	; 147
 17c:	bf 4f       	sbci	r27, 0xFF	; 255
 17e:	8c 93       	st	X, r24
	counterRx ++;
 180:	ef 5f       	subi	r30, 0xFF	; 255
 182:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <__data_end>
	if(counterRx > 9 || Distance[counterRx - 1] == 'm')
 186:	ea 30       	cpi	r30, 0x0A	; 10
 188:	30 f4       	brcc	.+12     	; 0x196 <__vector_13+0x3a>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	e4 59       	subi	r30, 0x94	; 148
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	80 81       	ld	r24, Z
 192:	8d 36       	cpi	r24, 0x6D	; 109
 194:	11 f4       	brne	.+4      	; 0x19a <__vector_13+0x3e>
	counterRx = 0;
 196:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <LCD_sendCommand>:
            break;
        }

        i--;
    }
}
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 1bc:	c4 fb       	bst	r28, 4
 1be:	44 27       	eor	r20, r20
 1c0:	40 f9       	bld	r20, 0
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 1ca:	c5 fb       	bst	r28, 5
 1cc:	44 27       	eor	r20, r20
 1ce:	40 f9       	bld	r20, 0
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 1d8:	c6 fb       	bst	r28, 6
 1da:	44 27       	eor	r20, r20
 1dc:	40 f9       	bld	r20, 0
 1de:	66 e0       	ldi	r22, 0x06	; 6
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 1e6:	4c 2f       	mov	r20, r28
 1e8:	44 1f       	adc	r20, r20
 1ea:	44 27       	eor	r20, r20
 1ec:	44 1f       	adc	r20, r20
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	67 e0       	ldi	r22, 0x07	; 7
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 200:	8f ec       	ldi	r24, 0xCF	; 207
 202:	97 e0       	ldi	r25, 0x07	; 7
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_sendCommand+0x56>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_sendCommand+0x5c>
 20a:	00 00       	nop
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	67 e0       	ldi	r22, 0x07	; 7
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 216:	8f ec       	ldi	r24, 0xCF	; 207
 218:	97 e0       	ldi	r25, 0x07	; 7
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_sendCommand+0x6c>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_sendCommand+0x72>
 220:	00 00       	nop
 222:	4c 2f       	mov	r20, r28
 224:	41 70       	andi	r20, 0x01	; 1
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 22e:	c1 fb       	bst	r28, 1
 230:	44 27       	eor	r20, r20
 232:	40 f9       	bld	r20, 0
 234:	65 e0       	ldi	r22, 0x05	; 5
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 23c:	c2 fb       	bst	r28, 2
 23e:	44 27       	eor	r20, r20
 240:	40 f9       	bld	r20, 0
 242:	66 e0       	ldi	r22, 0x06	; 6
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 24a:	c3 fb       	bst	r28, 3
 24c:	44 27       	eor	r20, r20
 24e:	40 f9       	bld	r20, 0
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	67 e0       	ldi	r22, 0x07	; 7
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 262:	8f ec       	ldi	r24, 0xCF	; 207
 264:	97 e0       	ldi	r25, 0x07	; 7
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_sendCommand+0xb8>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_sendCommand+0xbe>
 26c:	00 00       	nop
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	67 e0       	ldi	r22, 0x07	; 7
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_sendCommand+0xce>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_sendCommand+0xd4>
 282:	00 00       	nop
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <LCD_Init>:
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	66 e0       	ldi	r22, 0x06	; 6
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	67 e0       	ldi	r22, 0x07	; 7
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 b7 02 	call	0x56e	; 0x56e <DIO_setPinDirection>
 2ce:	2f e7       	ldi	r18, 0x7F	; 127
 2d0:	88 e3       	ldi	r24, 0x38	; 56
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <LCD_Init+0x4c>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_Init+0x56>
 2de:	00 00       	nop
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 2e6:	8f ec       	ldi	r24, 0xCF	; 207
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_Init+0x62>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_Init+0x68>
 2f0:	00 00       	nop
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 2f8:	8f ec       	ldi	r24, 0xCF	; 207
 2fa:	97 e0       	ldi	r25, 0x07	; 7
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_Init+0x74>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_Init+0x7a>
 302:	00 00       	nop
 304:	8e e0       	ldi	r24, 0x0E	; 14
 306:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_Init+0x86>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_Init+0x8c>
 314:	00 00       	nop
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_Init+0x98>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_Init+0x9e>
 326:	00 00       	nop
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 32e:	8f ec       	ldi	r24, 0xCF	; 207
 330:	97 e0       	ldi	r25, 0x07	; 7
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_Init+0xaa>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_Init+0xb0>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <LCD_writeData>:
 33c:	cf 93       	push	r28
 33e:	c8 2f       	mov	r28, r24
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 34a:	c4 fb       	bst	r28, 4
 34c:	44 27       	eor	r20, r20
 34e:	40 f9       	bld	r20, 0
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 358:	c5 fb       	bst	r28, 5
 35a:	44 27       	eor	r20, r20
 35c:	40 f9       	bld	r20, 0
 35e:	65 e0       	ldi	r22, 0x05	; 5
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 366:	c6 fb       	bst	r28, 6
 368:	44 27       	eor	r20, r20
 36a:	40 f9       	bld	r20, 0
 36c:	66 e0       	ldi	r22, 0x06	; 6
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 374:	4c 2f       	mov	r20, r28
 376:	44 1f       	adc	r20, r20
 378:	44 27       	eor	r20, r20
 37a:	44 1f       	adc	r20, r20
 37c:	67 e0       	ldi	r22, 0x07	; 7
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	67 e0       	ldi	r22, 0x07	; 7
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 38e:	8f ec       	ldi	r24, 0xCF	; 207
 390:	97 e0       	ldi	r25, 0x07	; 7
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <LCD_writeData+0x56>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_writeData+0x5c>
 398:	00 00       	nop
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 3a4:	8f ec       	ldi	r24, 0xCF	; 207
 3a6:	97 e0       	ldi	r25, 0x07	; 7
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_writeData+0x6c>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_writeData+0x72>
 3ae:	00 00       	nop
 3b0:	4c 2f       	mov	r20, r28
 3b2:	41 70       	andi	r20, 0x01	; 1
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 3bc:	c1 fb       	bst	r28, 1
 3be:	44 27       	eor	r20, r20
 3c0:	40 f9       	bld	r20, 0
 3c2:	65 e0       	ldi	r22, 0x05	; 5
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 3ca:	c2 fb       	bst	r28, 2
 3cc:	44 27       	eor	r20, r20
 3ce:	40 f9       	bld	r20, 0
 3d0:	66 e0       	ldi	r22, 0x06	; 6
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 3d8:	c3 fb       	bst	r28, 3
 3da:	44 27       	eor	r20, r20
 3dc:	40 f9       	bld	r20, 0
 3de:	67 e0       	ldi	r22, 0x07	; 7
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	67 e0       	ldi	r22, 0x07	; 7
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 3f0:	8f ec       	ldi	r24, 0xCF	; 207
 3f2:	97 e0       	ldi	r25, 0x07	; 7
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_writeData+0xb8>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_writeData+0xbe>
 3fa:	00 00       	nop
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 39 02 	call	0x472	; 0x472 <DIO_setPin>
 406:	8f ec       	ldi	r24, 0xCF	; 207
 408:	97 e0       	ldi	r25, 0x07	; 7
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <LCD_writeChar>:
 416:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_writeData>
 41a:	08 95       	ret

0000041c <LCD_writeString>:
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	8c 01       	movw	r16, r24
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	03 c0       	rjmp	.+6      	; 0x42e <LCD_writeString+0x12>
 428:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_writeChar>
 42c:	cf 5f       	subi	r28, 0xFF	; 255
 42e:	f8 01       	movw	r30, r16
 430:	ec 0f       	add	r30, r28
 432:	f1 1d       	adc	r31, r1
 434:	80 81       	ld	r24, Z
 436:	81 11       	cpse	r24, r1
 438:	f7 cf       	rjmp	.-18     	; 0x428 <LCD_writeString+0xc>
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <LCD_GOTO>:

void LCD_GOTO(u8_t raw, u8_t col)
{
    switch (raw)
 442:	88 23       	and	r24, r24
 444:	19 f0       	breq	.+6      	; 0x44c <LCD_GOTO+0xa>
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	41 f0       	breq	.+16     	; 0x45a <LCD_GOTO+0x18>
 44a:	08 95       	ret
	{
	case 0:
		if ((col < 16) && (col >= 0))
 44c:	60 31       	cpi	r22, 0x10	; 16
 44e:	58 f4       	brcc	.+22     	; 0x466 <LCD_GOTO+0x24>
		{
			LCD_sendCommand(LCD_COM_SET_CURSOR_FIRST_LINE + col);
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	86 0f       	add	r24, r22
 454:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 458:	08 95       	ret
		}
		break;
	case 1:
		if ((col < 16) && (col >= 0))
 45a:	60 31       	cpi	r22, 0x10	; 16
 45c:	20 f4       	brcc	.+8      	; 0x466 <LCD_GOTO+0x24>
		{
			LCD_sendCommand(LCD_COM_SET_CURSOR_SECOND_LINE + col);
 45e:	80 ec       	ldi	r24, 0xC0	; 192
 460:	86 0f       	add	r24, r22
 462:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_sendCommand>
 466:	08 95       	ret

00000468 <main>:
#include "Application/Application.h"


int main(void)
{
	app_init();
 468:	0e 94 51 00 	call	0xa2	; 0xa2 <app_init>
    
    while (1) 
    {
		app_start();
 46c:	0e 94 5b 00 	call	0xb6	; 0xb6 <app_start>
 470:	fd cf       	rjmp	.-6      	; 0x46c <main+0x4>

00000472 <DIO_setPin>:
EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;

    if (pinValue == LOW)
 472:	41 11       	cpse	r20, r1
 474:	3c c0       	rjmp	.+120    	; 0x4ee <DIO_setPin+0x7c>
    {
        switch (portNum)
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	99 f0       	breq	.+38     	; 0x4a0 <DIO_setPin+0x2e>
 47a:	28 f0       	brcs	.+10     	; 0x486 <DIO_setPin+0x14>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	e9 f0       	breq	.+58     	; 0x4ba <DIO_setPin+0x48>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	41 f1       	breq	.+80     	; 0x4d4 <DIO_setPin+0x62>
 484:	6e c0       	rjmp	.+220    	; 0x562 <DIO_setPin+0xf0>
        {
        case PORT_A:
            CLR_BIT(PORTA, pinNum);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_setPin+0x20>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_setPin+0x1c>
 496:	80 95       	com	r24
 498:	82 23       	and	r24, r18
 49a:	8b bb       	out	0x1b, r24	; 27
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 49c:	81 e0       	ldi	r24, 0x01	; 1
    {
        switch (portNum)
        {
        case PORT_A:
            CLR_BIT(PORTA, pinNum);
            break;
 49e:	08 95       	ret
        case PORT_B:
            CLR_BIT(PORTB, pinNum);
 4a0:	28 b3       	in	r18, 0x18	; 24
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_setPin+0x3a>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_setPin+0x36>
 4b0:	80 95       	com	r24
 4b2:	82 23       	and	r24, r18
 4b4:	88 bb       	out	0x18, r24	; 24
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            CLR_BIT(PORTA, pinNum);
            break;
        case PORT_B:
            CLR_BIT(PORTB, pinNum);
            break;
 4b8:	08 95       	ret
        case PORT_C:
            CLR_BIT(PORTC, pinNum);
 4ba:	25 b3       	in	r18, 0x15	; 21
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_setPin+0x54>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_setPin+0x50>
 4ca:	80 95       	com	r24
 4cc:	82 23       	and	r24, r18
 4ce:	85 bb       	out	0x15, r24	; 21
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            CLR_BIT(PORTB, pinNum);
            break;
        case PORT_C:
            CLR_BIT(PORTC, pinNum);
            break;
 4d2:	08 95       	ret
        case PORT_D:
            CLR_BIT(PORTD, pinNum);
 4d4:	22 b3       	in	r18, 0x12	; 18
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_setPin+0x6e>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_setPin+0x6a>
 4e4:	80 95       	com	r24
 4e6:	82 23       	and	r24, r18
 4e8:	82 bb       	out	0x12, r24	; 18
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            CLR_BIT(PORTC, pinNum);
            break;
        case PORT_D:
            CLR_BIT(PORTD, pinNum);
            break;
 4ec:	08 95       	ret
        default:
            state = E_ERROR;
            break;
        }
    }
    else if (pinValue == HIGH)
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	d1 f5       	brne	.+116    	; 0x566 <DIO_setPin+0xf4>
    {
        switch (portNum)
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	91 f0       	breq	.+36     	; 0x51a <DIO_setPin+0xa8>
 4f6:	28 f0       	brcs	.+10     	; 0x502 <DIO_setPin+0x90>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	d9 f0       	breq	.+54     	; 0x532 <DIO_setPin+0xc0>
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	29 f1       	breq	.+74     	; 0x54a <DIO_setPin+0xd8>
 500:	34 c0       	rjmp	.+104    	; 0x56a <DIO_setPin+0xf8>
        {
        case PORT_A:
            SET_BIT(PORTA, pinNum);
 502:	2b b3       	in	r18, 0x1b	; 27
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_setPin+0x9c>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_setPin+0x98>
 512:	82 2b       	or	r24, r18
 514:	8b bb       	out	0x1b, r24	; 27
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 516:	81 e0       	ldi	r24, 0x01	; 1
    {
        switch (portNum)
        {
        case PORT_A:
            SET_BIT(PORTA, pinNum);
            break;
 518:	08 95       	ret
        case PORT_B:
            SET_BIT(PORTB, pinNum);
 51a:	28 b3       	in	r18, 0x18	; 24
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_setPin+0xb4>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_setPin+0xb0>
 52a:	82 2b       	or	r24, r18
 52c:	88 bb       	out	0x18, r24	; 24
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 52e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            SET_BIT(PORTA, pinNum);
            break;
        case PORT_B:
            SET_BIT(PORTB, pinNum);
            break;
 530:	08 95       	ret
        case PORT_C:
            SET_BIT(PORTC, pinNum);
 532:	25 b3       	in	r18, 0x15	; 21
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_setPin+0xcc>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_setPin+0xc8>
 542:	82 2b       	or	r24, r18
 544:	85 bb       	out	0x15, r24	; 21
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 546:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            SET_BIT(PORTB, pinNum);
            break;
        case PORT_C:
            SET_BIT(PORTC, pinNum);
            break;
 548:	08 95       	ret
        case PORT_D:
            SET_BIT(PORTD, pinNum);
 54a:	22 b3       	in	r18, 0x12	; 18
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_setPin+0xe4>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_setPin+0xe0>
 55a:	82 2b       	or	r24, r18
 55c:	82 bb       	out	0x12, r24	; 18
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 55e:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            SET_BIT(PORTC, pinNum);
            break;
        case PORT_D:
            SET_BIT(PORTD, pinNum);
            break;
 560:	08 95       	ret
            break;
        case PORT_D:
            CLR_BIT(PORTD, pinNum);
            break;
        default:
            state = E_ERROR;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
#include "DIO.h"

EN_ERRORSTATE_t DIO_setPin(EN_portType_t portNum, u8_t pinNum, u8_t pinValue)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	08 95       	ret
            break;
        case PORT_D:
            SET_BIT(PORTD, pinNum);
            break;
        default:
            state = E_ERROR;
 56a:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return state;
}
 56c:	08 95       	ret

0000056e <DIO_setPinDirection>:
EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;

    if (pinDirection == LOW)
 56e:	41 11       	cpse	r20, r1
 570:	3c c0       	rjmp	.+120    	; 0x5ea <DIO_setPinDirection+0x7c>
    {
        switch (portNum)
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	99 f0       	breq	.+38     	; 0x59c <DIO_setPinDirection+0x2e>
 576:	28 f0       	brcs	.+10     	; 0x582 <DIO_setPinDirection+0x14>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	e9 f0       	breq	.+58     	; 0x5b6 <DIO_setPinDirection+0x48>
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	41 f1       	breq	.+80     	; 0x5d0 <DIO_setPinDirection+0x62>
 580:	6e c0       	rjmp	.+220    	; 0x65e <DIO_setPinDirection+0xf0>
        {
        case PORT_A:
            CLR_BIT(DDRA, pinNum);
 582:	2a b3       	in	r18, 0x1a	; 26
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_setPinDirection+0x20>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_setPinDirection+0x1c>
 592:	80 95       	com	r24
 594:	82 23       	and	r24, r18
 596:	8a bb       	out	0x1a, r24	; 26
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 598:	81 e0       	ldi	r24, 0x01	; 1
    {
        switch (portNum)
        {
        case PORT_A:
            CLR_BIT(DDRA, pinNum);
            break;
 59a:	08 95       	ret
        case PORT_B:
            CLR_BIT(DDRB, pinNum);
 59c:	27 b3       	in	r18, 0x17	; 23
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_setPinDirection+0x3a>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_setPinDirection+0x36>
 5ac:	80 95       	com	r24
 5ae:	82 23       	and	r24, r18
 5b0:	87 bb       	out	0x17, r24	; 23
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            CLR_BIT(DDRA, pinNum);
            break;
        case PORT_B:
            CLR_BIT(DDRB, pinNum);
            break;
 5b4:	08 95       	ret
        case PORT_C:
            CLR_BIT(DDRC, pinNum);
 5b6:	24 b3       	in	r18, 0x14	; 20
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_setPinDirection+0x54>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_setPinDirection+0x50>
 5c6:	80 95       	com	r24
 5c8:	82 23       	and	r24, r18
 5ca:	84 bb       	out	0x14, r24	; 20
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            CLR_BIT(DDRB, pinNum);
            break;
        case PORT_C:
            CLR_BIT(DDRC, pinNum);
            break;
 5ce:	08 95       	ret
        case PORT_D:
            CLR_BIT(DDRD, pinNum);
 5d0:	21 b3       	in	r18, 0x11	; 17
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_setPinDirection+0x6e>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_setPinDirection+0x6a>
 5e0:	80 95       	com	r24
 5e2:	82 23       	and	r24, r18
 5e4:	81 bb       	out	0x11, r24	; 17
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            CLR_BIT(DDRC, pinNum);
            break;
        case PORT_D:
            CLR_BIT(DDRD, pinNum);
            break;
 5e8:	08 95       	ret
        default:
            state = E_ERROR;
            break;
        }
    }
    else if (pinDirection == HIGH)
 5ea:	41 30       	cpi	r20, 0x01	; 1
 5ec:	d1 f5       	brne	.+116    	; 0x662 <DIO_setPinDirection+0xf4>
    {
        switch (portNum)
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	91 f0       	breq	.+36     	; 0x616 <DIO_setPinDirection+0xa8>
 5f2:	28 f0       	brcs	.+10     	; 0x5fe <DIO_setPinDirection+0x90>
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	d9 f0       	breq	.+54     	; 0x62e <DIO_setPinDirection+0xc0>
 5f8:	83 30       	cpi	r24, 0x03	; 3
 5fa:	29 f1       	breq	.+74     	; 0x646 <DIO_setPinDirection+0xd8>
 5fc:	34 c0       	rjmp	.+104    	; 0x666 <DIO_setPinDirection+0xf8>
        {
        case PORT_A:
            SET_BIT(DDRA, pinNum);
 5fe:	2a b3       	in	r18, 0x1a	; 26
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_setPinDirection+0x9c>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_setPinDirection+0x98>
 60e:	82 2b       	or	r24, r18
 610:	8a bb       	out	0x1a, r24	; 26
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 612:	81 e0       	ldi	r24, 0x01	; 1
    {
        switch (portNum)
        {
        case PORT_A:
            SET_BIT(DDRA, pinNum);
            break;
 614:	08 95       	ret
        case PORT_B:
            SET_BIT(DDRB, pinNum);
 616:	27 b3       	in	r18, 0x17	; 23
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_setPinDirection+0xb4>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_setPinDirection+0xb0>
 626:	82 2b       	or	r24, r18
 628:	87 bb       	out	0x17, r24	; 23
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 62a:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_A:
            SET_BIT(DDRA, pinNum);
            break;
        case PORT_B:
            SET_BIT(DDRB, pinNum);
            break;
 62c:	08 95       	ret
        case PORT_C:
            SET_BIT(DDRC, pinNum);
 62e:	24 b3       	in	r18, 0x14	; 20
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_setPinDirection+0xcc>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	6a 95       	dec	r22
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_setPinDirection+0xc8>
 63e:	82 2b       	or	r24, r18
 640:	84 bb       	out	0x14, r24	; 20
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 642:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
            SET_BIT(DDRB, pinNum);
            break;
        case PORT_C:
            SET_BIT(DDRC, pinNum);
            break;
 644:	08 95       	ret
        case PORT_D:
            SET_BIT(DDRD, pinNum);
 646:	21 b3       	in	r18, 0x11	; 17
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_setPinDirection+0xe4>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_setPinDirection+0xe0>
 656:	82 2b       	or	r24, r18
 658:	81 bb       	out	0x11, r24	; 17
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 65a:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
            SET_BIT(DDRC, pinNum);
            break;
        case PORT_D:
            SET_BIT(DDRD, pinNum);
            break;
 65c:	08 95       	ret
            break;
        case PORT_D:
            CLR_BIT(DDRD, pinNum);
            break;
        default:
            state = E_ERROR;
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
}

EN_ERRORSTATE_t DIO_setPinDirection(EN_portType_t portNum, u8_t pinNum, u8_t pinDirection)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret
            break;
        case PORT_D:
            SET_BIT(DDRD, pinNum);
            break;
        default:
            state = E_ERROR;
 666:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return state;
}
 668:	08 95       	ret

0000066a <TIMER1_init>:
*/
extern EN_ERRORSTATE_t TIMER1_Get_Ticktime(uint8_t *PTR_ticktime)
{
	*PTR_ticktime = (TCNT1H << 8) | TCNT1L;
	return E_OK;
}
 66a:	fc 01       	movw	r30, r24
 66c:	91 81       	ldd	r25, Z+1	; 0x01
 66e:	91 30       	cpi	r25, 0x01	; 1
 670:	e1 f0       	breq	.+56     	; 0x6aa <TIMER1_init+0x40>
 672:	30 f0       	brcs	.+12     	; 0x680 <TIMER1_init+0x16>
 674:	92 30       	cpi	r25, 0x02	; 2
 676:	29 f1       	breq	.+74     	; 0x6c2 <TIMER1_init+0x58>
 678:	93 30       	cpi	r25, 0x03	; 3
 67a:	09 f4       	brne	.+2      	; 0x67e <TIMER1_init+0x14>
 67c:	44 c0       	rjmp	.+136    	; 0x706 <TIMER1_init+0x9c>
 67e:	65 c0       	rjmp	.+202    	; 0x74a <TIMER1_init+0xe0>
 680:	8f b5       	in	r24, 0x2f	; 47
 682:	8e 7f       	andi	r24, 0xFE	; 254
 684:	8f bd       	out	0x2f, r24	; 47
 686:	8f b5       	in	r24, 0x2f	; 47
 688:	8d 7f       	andi	r24, 0xFD	; 253
 68a:	8f bd       	out	0x2f, r24	; 47
 68c:	8e b5       	in	r24, 0x2e	; 46
 68e:	87 7f       	andi	r24, 0xF7	; 247
 690:	8e bd       	out	0x2e, r24	; 46
 692:	8e b5       	in	r24, 0x2e	; 46
 694:	8f 7e       	andi	r24, 0xEF	; 239
 696:	8e bd       	out	0x2e, r24	; 46
 698:	83 81       	ldd	r24, Z+3	; 0x03
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	09 f0       	breq	.+2      	; 0x6a0 <TIMER1_init+0x36>
 69e:	57 c0       	rjmp	.+174    	; 0x74e <TIMER1_init+0xe4>
 6a0:	89 b7       	in	r24, 0x39	; 57
 6a2:	80 62       	ori	r24, 0x20	; 32
 6a4:	89 bf       	out	0x39, r24	; 57
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	08 95       	ret
 6aa:	8e b5       	in	r24, 0x2e	; 46
 6ac:	88 60       	ori	r24, 0x08	; 8
 6ae:	8e bd       	out	0x2e, r24	; 46
 6b0:	83 81       	ldd	r24, Z+3	; 0x03
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	09 f0       	breq	.+2      	; 0x6b8 <TIMER1_init+0x4e>
 6b6:	4d c0       	rjmp	.+154    	; 0x752 <TIMER1_init+0xe8>
 6b8:	89 b7       	in	r24, 0x39	; 57
 6ba:	80 61       	ori	r24, 0x10	; 16
 6bc:	89 bf       	out	0x39, r24	; 57
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	08 95       	ret
 6c2:	8f b5       	in	r24, 0x2f	; 47
 6c4:	8b 61       	ori	r24, 0x1B	; 27
 6c6:	8f bd       	out	0x2f, r24	; 47
 6c8:	84 81       	ldd	r24, Z+4	; 0x04
 6ca:	81 11       	cpse	r24, r1
 6cc:	0e c0       	rjmp	.+28     	; 0x6ea <TIMER1_init+0x80>
 6ce:	8f b5       	in	r24, 0x2f	; 47
 6d0:	8f 7e       	andi	r24, 0xEF	; 239
 6d2:	8f bd       	out	0x2f, r24	; 47
 6d4:	8f b5       	in	r24, 0x2f	; 47
 6d6:	8f 7d       	andi	r24, 0xDF	; 223
 6d8:	8f bd       	out	0x2f, r24	; 47
 6da:	8f b5       	in	r24, 0x2f	; 47
 6dc:	8f 7b       	andi	r24, 0xBF	; 191
 6de:	8f bd       	out	0x2f, r24	; 47
 6e0:	8f b5       	in	r24, 0x2f	; 47
 6e2:	8f 77       	andi	r24, 0x7F	; 127
 6e4:	8f bd       	out	0x2f, r24	; 47
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <TIMER1_init+0x8e>
 6ee:	8f b5       	in	r24, 0x2f	; 47
 6f0:	80 6a       	ori	r24, 0xA0	; 160
 6f2:	8f bd       	out	0x2f, r24	; 47
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	69 f5       	brne	.+90     	; 0x756 <TIMER1_init+0xec>
 6fc:	8f b5       	in	r24, 0x2f	; 47
 6fe:	80 6f       	ori	r24, 0xF0	; 240
 700:	8f bd       	out	0x2f, r24	; 47
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	08 95       	ret
 706:	8f b5       	in	r24, 0x2f	; 47
 708:	83 61       	ori	r24, 0x13	; 19
 70a:	8f bd       	out	0x2f, r24	; 47
 70c:	84 81       	ldd	r24, Z+4	; 0x04
 70e:	81 11       	cpse	r24, r1
 710:	0e c0       	rjmp	.+28     	; 0x72e <TIMER1_init+0xc4>
 712:	8f b5       	in	r24, 0x2f	; 47
 714:	8f 7e       	andi	r24, 0xEF	; 239
 716:	8f bd       	out	0x2f, r24	; 47
 718:	8f b5       	in	r24, 0x2f	; 47
 71a:	8f 7d       	andi	r24, 0xDF	; 223
 71c:	8f bd       	out	0x2f, r24	; 47
 71e:	8f b5       	in	r24, 0x2f	; 47
 720:	8f 7b       	andi	r24, 0xBF	; 191
 722:	8f bd       	out	0x2f, r24	; 47
 724:	8f b5       	in	r24, 0x2f	; 47
 726:	8f 77       	andi	r24, 0x7F	; 127
 728:	8f bd       	out	0x2f, r24	; 47
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	08 95       	ret
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	29 f4       	brne	.+10     	; 0x73c <TIMER1_init+0xd2>
 732:	8f b5       	in	r24, 0x2f	; 47
 734:	80 6a       	ori	r24, 0xA0	; 160
 736:	8f bd       	out	0x2f, r24	; 47
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	69 f4       	brne	.+26     	; 0x75a <TIMER1_init+0xf0>
 740:	8f b5       	in	r24, 0x2f	; 47
 742:	80 6f       	ori	r24, 0xF0	; 240
 744:	8f bd       	out	0x2f, r24	; 47
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	08 95       	ret
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	08 95       	ret
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	08 95       	ret
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	08 95       	ret

0000075e <TIMER1_start>:
 75e:	fc 01       	movw	r30, r24
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	91 11       	cpse	r25, r1
 764:	0d c0       	rjmp	.+26     	; 0x780 <TIMER1_start+0x22>
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	a1 e0       	ldi	r26, 0x01	; 1
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	84 1b       	sub	r24, r20
 770:	95 0b       	sbc	r25, r21
 772:	a6 0b       	sbc	r26, r22
 774:	b7 0b       	sbc	r27, r23
 776:	89 2f       	mov	r24, r25
 778:	8d bd       	out	0x2d, r24	; 45
 77a:	41 95       	neg	r20
 77c:	4c bd       	out	0x2c, r20	; 44
 77e:	18 c0       	rjmp	.+48     	; 0x7b0 <TIMER1_start+0x52>
 780:	91 30       	cpi	r25, 0x01	; 1
 782:	49 f4       	brne	.+18     	; 0x796 <TIMER1_start+0x38>
 784:	1d bc       	out	0x2d, r1	; 45
 786:	1c bc       	out	0x2c, r1	; 44
 788:	5b bd       	out	0x2b, r21	; 43
 78a:	59 bd       	out	0x29, r21	; 41
 78c:	57 bd       	out	0x27, r21	; 39
 78e:	4a bd       	out	0x2a, r20	; 42
 790:	48 bd       	out	0x28, r20	; 40
 792:	46 bd       	out	0x26, r20	; 38
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <TIMER1_start+0x52>
 796:	93 30       	cpi	r25, 0x03	; 3
 798:	29 f4       	brne	.+10     	; 0x7a4 <TIMER1_start+0x46>
 79a:	5b bd       	out	0x2b, r21	; 43
 79c:	59 bd       	out	0x29, r21	; 41
 79e:	4a bd       	out	0x2a, r20	; 42
 7a0:	48 bd       	out	0x28, r20	; 40
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <TIMER1_start+0x52>
 7a4:	92 30       	cpi	r25, 0x02	; 2
 7a6:	e9 f5       	brne	.+122    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7a8:	5b bd       	out	0x2b, r21	; 43
 7aa:	59 bd       	out	0x29, r21	; 41
 7ac:	4a bd       	out	0x2a, r20	; 42
 7ae:	48 bd       	out	0x28, r20	; 40
 7b0:	e2 81       	ldd	r30, Z+2	; 0x02
 7b2:	8e 2f       	mov	r24, r30
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	88 30       	cpi	r24, 0x08	; 8
 7b8:	91 05       	cpc	r25, r1
 7ba:	a8 f5       	brcc	.+106    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7bc:	fc 01       	movw	r30, r24
 7be:	e6 5d       	subi	r30, 0xD6	; 214
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__tablejump2__>
 7c6:	8e b5       	in	r24, 0x2e	; 46
 7c8:	8e 7f       	andi	r24, 0xFE	; 254
 7ca:	8e bd       	out	0x2e, r24	; 46
 7cc:	8e b5       	in	r24, 0x2e	; 46
 7ce:	8d 7f       	andi	r24, 0xFD	; 253
 7d0:	8e bd       	out	0x2e, r24	; 46
 7d2:	8e b5       	in	r24, 0x2e	; 46
 7d4:	8b 7f       	andi	r24, 0xFB	; 251
 7d6:	8e bd       	out	0x2e, r24	; 46
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	08 95       	ret
 7dc:	8e b5       	in	r24, 0x2e	; 46
 7de:	81 60       	ori	r24, 0x01	; 1
 7e0:	8e bd       	out	0x2e, r24	; 46
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	08 95       	ret
 7e6:	8e b5       	in	r24, 0x2e	; 46
 7e8:	82 60       	ori	r24, 0x02	; 2
 7ea:	8e bd       	out	0x2e, r24	; 46
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	08 95       	ret
 7f0:	8e b5       	in	r24, 0x2e	; 46
 7f2:	83 60       	ori	r24, 0x03	; 3
 7f4:	8e bd       	out	0x2e, r24	; 46
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	08 95       	ret
 7fa:	8e b5       	in	r24, 0x2e	; 46
 7fc:	84 60       	ori	r24, 0x04	; 4
 7fe:	8e bd       	out	0x2e, r24	; 46
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	08 95       	ret
 804:	8e b5       	in	r24, 0x2e	; 46
 806:	85 60       	ori	r24, 0x05	; 5
 808:	8e bd       	out	0x2e, r24	; 46
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	08 95       	ret
 80e:	8e b5       	in	r24, 0x2e	; 46
 810:	86 60       	ori	r24, 0x06	; 6
 812:	8e bd       	out	0x2e, r24	; 46
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	08 95       	ret
 818:	8e b5       	in	r24, 0x2e	; 46
 81a:	87 60       	ori	r24, 0x07	; 7
 81c:	8e bd       	out	0x2e, r24	; 46
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	08 95       	ret
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	08 95       	ret

0000082a <TIMER1_Flag_Reset>:
 82a:	fc 01       	movw	r30, r24
 82c:	81 81       	ldd	r24, Z+1	; 0x01
 82e:	81 11       	cpse	r24, r1
 830:	05 c0       	rjmp	.+10     	; 0x83c <TIMER1_Flag_Reset+0x12>
 832:	88 b7       	in	r24, 0x38	; 56
 834:	84 60       	ori	r24, 0x04	; 4
 836:	88 bf       	out	0x38, r24	; 56
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	08 95       	ret
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	29 f4       	brne	.+10     	; 0x84a <TIMER1_Flag_Reset+0x20>
 840:	88 b7       	in	r24, 0x38	; 56
 842:	80 61       	ori	r24, 0x10	; 16
 844:	88 bf       	out	0x38, r24	; 56
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	08 95       	ret
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	08 95       	ret

0000084e <TIMER1_Reset>:
Input : Configuration
output : ERROR or OK
*/
extern EN_ERRORSTATE_t TIMER1_Reset(void)
{
	TCNT1 = 0x0000;
 84e:	1d bc       	out	0x2d, r1	; 45
 850:	1c bc       	out	0x2c, r1	; 44
	return E_OK;
}
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	08 95       	ret

00000856 <TIMER1_3secDelay>:
function to generate 5sec using CPU at 8M hz
input : the timer1 config
output : make the timer1 configuration for the 5.3.000064 = (1024/8000000)*23438 so wenn need it as CTC as set OCR = 23438
*/
extern EN_ERRORSTATE_t TIMER1_3secDelay(Str_Timer1Configuration_t *Config_t)
{
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	ec 01       	movw	r28, r24
	Config_t->Mode = TIMER_MODE;
 85c:	18 82       	st	Y, r1
	Config_t->Ticks_Mode = CTC_MODE;
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	89 83       	std	Y+1, r24	; 0x01
	Config_t->Timer_Psc = F_CPU_CLOCK_1024_TIMER_1;
 862:	95 e0       	ldi	r25, 0x05	; 5
 864:	9a 83       	std	Y+2, r25	; 0x02
	Config_t->Interrupt_Mode = INTERRUPT;
 866:	8b 83       	std	Y+3, r24	; 0x03
	Config_t->PWM_Mode = PWM_NORMAL;
 868:	1c 82       	std	Y+4, r1	; 0x04
	TIMER1_init(Config_t);
 86a:	ce 01       	movw	r24, r28
 86c:	0e 94 35 03 	call	0x66a	; 0x66a <TIMER1_init>
	TIMER1_start(Config_t,23438);
 870:	4e e8       	ldi	r20, 0x8E	; 142
 872:	5b e5       	ldi	r21, 0x5B	; 91
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	ce 01       	movw	r24, r28
 87a:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER1_start>
	return E_OK;
}
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <UART_init>:

void UART_init()
{

	//Enable transmission and reception by using the UCSRB register.
	SET_BIT(UCSRB,RXCIE);
 886:	8a b1       	in	r24, 0x0a	; 10
 888:	80 68       	ori	r24, 0x80	; 128
 88a:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,TXEN);	//TXEN
 88c:	8a b1       	in	r24, 0x0a	; 10
 88e:	88 60       	ori	r24, 0x08	; 8
 890:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 892:	8a b1       	in	r24, 0x0a	; 10
 894:	80 61       	ori	r24, 0x10	; 16
 896:	8a b9       	out	0x0a, r24	; 10
	//Set data bit size to 8 bit by using the UCSRC register.
	SET_BIT(UCSRC,URSEL);
 898:	80 b5       	in	r24, 0x20	; 32
 89a:	80 68       	ori	r24, 0x80	; 128
 89c:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ0);
 89e:	80 b5       	in	r24, 0x20	; 32
 8a0:	82 60       	ori	r24, 0x02	; 2
 8a2:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
 8a4:	80 b5       	in	r24, 0x20	; 32
 8a6:	84 60       	ori	r24, 0x04	; 4
 8a8:	80 bd       	out	0x20, r24	; 32

	//Set baud rate using the UBRR register.
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
 8aa:	83 e3       	ldi	r24, 0x33	; 51
 8ac:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 8ae:	10 bc       	out	0x20, r1	; 32
 8b0:	08 95       	ret

000008b2 <__tablejump2__>:
 8b2:	ee 0f       	add	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	05 90       	lpm	r0, Z+
 8b8:	f4 91       	lpm	r31, Z
 8ba:	e0 2d       	mov	r30, r0
 8bc:	09 94       	ijmp

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
