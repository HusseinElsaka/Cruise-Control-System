
Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800060  00800060  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001474  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b35  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d3  00000000  00000000  00002a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000769  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdd  00000000  00000000  000046f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000052ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_2>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_5>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	41 03       	mulsu	r20, r17
  56:	4c 03       	fmul	r20, r20
  58:	51 03       	mulsu	r21, r17
  5a:	56 03       	mulsu	r21, r22
  5c:	5b 03       	fmul	r21, r19
  5e:	60 03       	mulsu	r22, r16
  60:	65 03       	mulsu	r22, r21
  62:	6a 03       	fmul	r22, r18

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a9 37       	cpi	r26, 0x79	; 121
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  84:	0c 94 24 04 	jmp	0x848	; 0x848 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <app_init>:


void app_init(void)
{
	/* Initialization */
	Ultrasonic_init();
  8c:	0e 94 4c 00 	call	0x98	; 0x98 <Ultrasonic_init>
  90:	08 95       	ret

00000092 <app_start>:
}


void app_start(void)
{
	Ultrasonic_getReading();
  92:	0e 94 65 00 	call	0xca	; 0xca <Ultrasonic_getReading>
  96:	08 95       	ret

00000098 <Ultrasonic_init>:
	else
	{
		// 0% speed
	}
	return E_OK;
}
  98:	0e 94 9d 03 	call	0x73a	; 0x73a <UART_init>
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	67 e0       	ldi	r22, 0x07	; 7
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_setPinDirection>
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_setPinDirection>
  b0:	63 e0       	ldi	r22, 0x03	; 3
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_pullUp>
  b8:	80 e7       	ldi	r24, 0x70	; 112
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 88 03 	call	0x710	; 0x710 <TIMER2_Counter_config>
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 a0 02 	call	0x540	; 0x540 <Enable_INT1>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret

000000ca <Ultrasonic_getReading>:
  ca:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sensor_working>
  ce:	81 11       	cpse	r24, r1
  d0:	10 c0       	rjmp	.+32     	; 0xf2 <Ultrasonic_getReading+0x28>
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_setPin>
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <Ultrasonic_getReading+0x14>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	67 e0       	ldi	r22, 0x07	; 7
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_setPin>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sensor_working>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	08 95       	ret

000000f6 <Ultrasonic_DataSend>:
output : Distance
return ERROR or OK
*/
extern EN_ERRORSTATE_t Ultrasonic_DataSend(void)
{
	UART_SendString(distance_str);
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 b4 03 	call	0x768	; 0x768 <UART_SendString>
	return E_OK;
}
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret

00000102 <__vector_2>:
Distance of Object (in cm) = (TIMER value) / 466.47 cm

*/

ISR(EXT_INT_1)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	if(sensor_working==1)
 124:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sensor_working>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	09 f0       	breq	.+2      	; 0x12e <__vector_2+0x2c>
 12c:	5d c0       	rjmp	.+186    	; 0x1e8 <__vector_2+0xe6>
	{
		if(rising_edge==0)
 12e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <rising_edge>
 132:	81 11       	cpse	r24, r1
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_2+0x50>
		{
			TIMER2_Reset();
 136:	0e 94 85 03 	call	0x70a	; 0x70a <TIMER2_Reset>
			rising_edge=1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <rising_edge>
			timer_counter=0;
 140:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <timer_counter>
 144:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timer_counter+0x1>
 148:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <timer_counter+0x2>
 14c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timer_counter+0x3>
 150:	4b c0       	rjmp	.+150    	; 0x1e8 <__vector_2+0xe6>
		}
		else
		{
			distance=(timer_counter*256+TCNT0)/466;
 152:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <timer_counter>
 156:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <timer_counter+0x1>
 15a:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <timer_counter+0x2>
 15e:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <timer_counter+0x3>
 162:	ba 2f       	mov	r27, r26
 164:	a9 2f       	mov	r26, r25
 166:	98 2f       	mov	r25, r24
 168:	88 27       	eor	r24, r24
 16a:	22 b7       	in	r18, 0x32	; 50
 16c:	bc 01       	movw	r22, r24
 16e:	cd 01       	movw	r24, r26
 170:	62 0f       	add	r22, r18
 172:	71 1d       	adc	r23, r1
 174:	81 1d       	adc	r24, r1
 176:	91 1d       	adc	r25, r1
 178:	22 ed       	ldi	r18, 0xD2	; 210
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodsi4>
 184:	da 01       	movw	r26, r20
 186:	c9 01       	movw	r24, r18
 188:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <distance>
 18c:	30 93 76 00 	sts	0x0076, r19	; 0x800076 <distance+0x1>
 190:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <distance+0x2>
 194:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <distance+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	60 e6       	ldi	r22, 0x60	; 96
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 ef 03 	call	0x7de	; 0x7de <__itoa_ncheck>
			itoa(distance,distance_str,10);
			strcat(distance_str," Cm");
 1a2:	e0 e6       	ldi	r30, 0x60	; 96
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	01 90       	ld	r0, Z+
 1a8:	00 20       	and	r0, r0
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <__vector_2+0xa4>
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	93 e4       	ldi	r25, 0x43	; 67
 1b2:	91 83       	std	Z+1, r25	; 0x01
 1b4:	80 83       	st	Z, r24
 1b6:	8d e6       	ldi	r24, 0x6D	; 109
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	93 83       	std	Z+3, r25	; 0x03
 1bc:	82 83       	std	Z+2, r24	; 0x02
			Ultrasonic_DataSend();
 1be:	0e 94 7b 00 	call	0xf6	; 0xf6 <Ultrasonic_DataSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	89 ef       	ldi	r24, 0xF9	; 249
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <__vector_2+0xc6>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <__vector_2+0xd0>
 1d2:	00 00       	nop
			Ultrasonic_CarSpeed(distance);
			_delay_ms(40);

			timer_counter=0;
 1d4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <timer_counter>
 1d8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timer_counter+0x1>
 1dc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <timer_counter+0x2>
 1e0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timer_counter+0x3>
			rising_edge=0;
 1e4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <rising_edge>
		}
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_5>:

ISR(TIMER2_OVF)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	timer_counter++;
 22c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <timer_counter>
 230:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <timer_counter+0x1>
 234:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <timer_counter+0x2>
 238:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <timer_counter+0x3>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	a1 1d       	adc	r26, r1
 240:	b1 1d       	adc	r27, r1
 242:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer_counter>
 246:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <timer_counter+0x1>
 24a:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <timer_counter+0x2>
 24e:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <timer_counter+0x3>
	if(timer_counter >730)
 252:	8b 3d       	cpi	r24, 0xDB	; 219
 254:	92 40       	sbci	r25, 0x02	; 2
 256:	a1 05       	cpc	r26, r1
 258:	b1 05       	cpc	r27, r1
 25a:	60 f0       	brcs	.+24     	; 0x274 <__vector_5+0x6a>
	{
		TIMER2_Reset();
 25c:	0e 94 85 03 	call	0x70a	; 0x70a <TIMER2_Reset>
		sensor_working=0;
 260:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <sensor_working>
		//rising_edge=0;
		timer_counter=0;
 264:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <timer_counter>
 268:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timer_counter+0x1>
 26c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <timer_counter+0x2>
 270:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timer_counter+0x3>
	}
	TIMER2_Flag_Reset(&COUNTER2);
 274:	80 e7       	ldi	r24, 0x70	; 112
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TIMER2_Flag_Reset>
	TIMER2_Reset();
 27c:	0e 94 85 03 	call	0x70a	; 0x70a <TIMER2_Reset>
	
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <main>:
#include "Application/Application.h"


int main(void)
{
	app_init();
 2a2:	0e 94 46 00 	call	0x8c	; 0x8c <app_init>
	
	while (1)
	{
		app_start();
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <app_start>
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <main+0x4>

000002ac <DIO_setPin>:
    default:
        state = E_ERROR;
        break;
    }
    return state;
}
 2ac:	41 11       	cpse	r20, r1
 2ae:	3c c0       	rjmp	.+120    	; 0x328 <DIO_setPin+0x7c>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	99 f0       	breq	.+38     	; 0x2da <DIO_setPin+0x2e>
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <DIO_setPin+0x14>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	e9 f0       	breq	.+58     	; 0x2f4 <DIO_setPin+0x48>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	41 f1       	breq	.+80     	; 0x30e <DIO_setPin+0x62>
 2be:	6e c0       	rjmp	.+220    	; 0x39c <DIO_setPin+0xf0>
 2c0:	2b b3       	in	r18, 0x1b	; 27
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_setPin+0x20>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_setPin+0x1c>
 2d0:	80 95       	com	r24
 2d2:	82 23       	and	r24, r18
 2d4:	8b bb       	out	0x1b, r24	; 27
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret
 2da:	28 b3       	in	r18, 0x18	; 24
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_setPin+0x3a>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_setPin+0x36>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	88 bb       	out	0x18, r24	; 24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	08 95       	ret
 2f4:	25 b3       	in	r18, 0x15	; 21
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_setPin+0x54>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_setPin+0x50>
 304:	80 95       	com	r24
 306:	82 23       	and	r24, r18
 308:	85 bb       	out	0x15, r24	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
 30e:	22 b3       	in	r18, 0x12	; 18
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_setPin+0x6e>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_setPin+0x6a>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	82 bb       	out	0x12, r24	; 18
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	08 95       	ret
 328:	41 30       	cpi	r20, 0x01	; 1
 32a:	d1 f5       	brne	.+116    	; 0x3a0 <DIO_setPin+0xf4>
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	91 f0       	breq	.+36     	; 0x354 <DIO_setPin+0xa8>
 330:	28 f0       	brcs	.+10     	; 0x33c <DIO_setPin+0x90>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	d9 f0       	breq	.+54     	; 0x36c <DIO_setPin+0xc0>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	29 f1       	breq	.+74     	; 0x384 <DIO_setPin+0xd8>
 33a:	34 c0       	rjmp	.+104    	; 0x3a4 <DIO_setPin+0xf8>
 33c:	2b b3       	in	r18, 0x1b	; 27
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_setPin+0x9c>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_setPin+0x98>
 34c:	82 2b       	or	r24, r18
 34e:	8b bb       	out	0x1b, r24	; 27
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret
 354:	28 b3       	in	r18, 0x18	; 24
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_setPin+0xb4>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_setPin+0xb0>
 364:	82 2b       	or	r24, r18
 366:	88 bb       	out	0x18, r24	; 24
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret
 36c:	25 b3       	in	r18, 0x15	; 21
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_setPin+0xcc>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_setPin+0xc8>
 37c:	82 2b       	or	r24, r18
 37e:	85 bb       	out	0x15, r24	; 21
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	22 b3       	in	r18, 0x12	; 18
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_setPin+0xe4>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_setPin+0xe0>
 394:	82 2b       	or	r24, r18
 396:	82 bb       	out	0x12, r24	; 18
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	08 95       	ret
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret

000003a8 <DIO_setPinDirection>:
 3a8:	41 11       	cpse	r20, r1
 3aa:	3c c0       	rjmp	.+120    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	99 f0       	breq	.+38     	; 0x3d6 <DIO_setPinDirection+0x2e>
 3b0:	28 f0       	brcs	.+10     	; 0x3bc <DIO_setPinDirection+0x14>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	e9 f0       	breq	.+58     	; 0x3f0 <DIO_setPinDirection+0x48>
 3b6:	83 30       	cpi	r24, 0x03	; 3
 3b8:	41 f1       	breq	.+80     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3ba:	6e c0       	rjmp	.+220    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 3bc:	2a b3       	in	r18, 0x1a	; 26
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_setPinDirection+0x20>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_setPinDirection+0x1c>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	8a bb       	out	0x1a, r24	; 26
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	08 95       	ret
 3d6:	27 b3       	in	r18, 0x17	; 23
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_setPinDirection+0x3a>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_setPinDirection+0x36>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	87 bb       	out	0x17, r24	; 23
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
 3f0:	24 b3       	in	r18, 0x14	; 20
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_setPinDirection+0x54>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_setPinDirection+0x50>
 400:	80 95       	com	r24
 402:	82 23       	and	r24, r18
 404:	84 bb       	out	0x14, r24	; 20
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	08 95       	ret
 40a:	21 b3       	in	r18, 0x11	; 17
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	82 23       	and	r24, r18
 41e:	81 bb       	out	0x11, r24	; 17
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
 424:	41 30       	cpi	r20, 0x01	; 1
 426:	d1 f5       	brne	.+116    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	91 f0       	breq	.+36     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 42c:	28 f0       	brcs	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	d9 f0       	breq	.+54     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	29 f1       	breq	.+74     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 436:	34 c0       	rjmp	.+104    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 438:	2a b3       	in	r18, 0x1a	; 26
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	82 2b       	or	r24, r18
 44a:	8a bb       	out	0x1a, r24	; 26
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	08 95       	ret
 450:	27 b3       	in	r18, 0x17	; 23
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	82 2b       	or	r24, r18
 462:	87 bb       	out	0x17, r24	; 23
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	08 95       	ret
 468:	24 b3       	in	r18, 0x14	; 20
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	82 2b       	or	r24, r18
 47a:	84 bb       	out	0x14, r24	; 20
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret
 480:	21 b3       	in	r18, 0x11	; 17
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	82 2b       	or	r24, r18
 492:	81 bb       	out	0x11, r24	; 17
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	08 95       	ret
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	08 95       	ret
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret

000004a4 <DIO_pullUp>:
EN_ERRORSTATE_t DIO_pullUp(EN_portType_t portNum, u8_t pinNum)
{
    EN_ERRORSTATE_t state;
    state = E_OK;

    switch (portNum)
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	b9 f0       	breq	.+46     	; 0x4d6 <DIO_pullUp+0x32>
 4a8:	28 f0       	brcs	.+10     	; 0x4b4 <DIO_pullUp+0x10>
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	29 f1       	breq	.+74     	; 0x4f8 <DIO_pullUp+0x54>
 4ae:	83 30       	cpi	r24, 0x03	; 3
 4b0:	a1 f1       	breq	.+104    	; 0x51a <DIO_pullUp+0x76>
 4b2:	44 c0       	rjmp	.+136    	; 0x53c <DIO_pullUp+0x98>
    {
    case PORT_A:
        CLR_BIT(DDRA, pinNum);
 4b4:	2a b3       	in	r18, 0x1a	; 26
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_pullUp+0x1c>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_pullUp+0x18>
 4c4:	98 2f       	mov	r25, r24
 4c6:	90 95       	com	r25
 4c8:	92 23       	and	r25, r18
 4ca:	9a bb       	out	0x1a, r25	; 26
        SET_BIT(PORTA, pinNum);
 4cc:	9b b3       	in	r25, 0x1b	; 27
 4ce:	89 2b       	or	r24, r25
 4d0:	8b bb       	out	0x1b, r24	; 27
}

EN_ERRORSTATE_t DIO_pullUp(EN_portType_t portNum, u8_t pinNum)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
    switch (portNum)
    {
    case PORT_A:
        CLR_BIT(DDRA, pinNum);
        SET_BIT(PORTA, pinNum);
        break;
 4d4:	08 95       	ret
    case PORT_B:
        CLR_BIT(DDRB, pinNum);
 4d6:	27 b3       	in	r18, 0x17	; 23
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_pullUp+0x3e>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_pullUp+0x3a>
 4e6:	98 2f       	mov	r25, r24
 4e8:	90 95       	com	r25
 4ea:	92 23       	and	r25, r18
 4ec:	97 bb       	out	0x17, r25	; 23
        SET_BIT(PORTB, pinNum);
 4ee:	98 b3       	in	r25, 0x18	; 24
 4f0:	89 2b       	or	r24, r25
 4f2:	88 bb       	out	0x18, r24	; 24
}

EN_ERRORSTATE_t DIO_pullUp(EN_portType_t portNum, u8_t pinNum)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
        SET_BIT(PORTA, pinNum);
        break;
    case PORT_B:
        CLR_BIT(DDRB, pinNum);
        SET_BIT(PORTB, pinNum);
        break;
 4f6:	08 95       	ret
    case PORT_C:
        CLR_BIT(DDRC, pinNum);
 4f8:	24 b3       	in	r18, 0x14	; 20
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_pullUp+0x60>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_pullUp+0x5c>
 508:	98 2f       	mov	r25, r24
 50a:	90 95       	com	r25
 50c:	92 23       	and	r25, r18
 50e:	94 bb       	out	0x14, r25	; 20
        SET_BIT(PORTC, pinNum);
 510:	95 b3       	in	r25, 0x15	; 21
 512:	89 2b       	or	r24, r25
 514:	85 bb       	out	0x15, r24	; 21
}

EN_ERRORSTATE_t DIO_pullUp(EN_portType_t portNum, u8_t pinNum)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 516:	81 e0       	ldi	r24, 0x01	; 1
        SET_BIT(PORTB, pinNum);
        break;
    case PORT_C:
        CLR_BIT(DDRC, pinNum);
        SET_BIT(PORTC, pinNum);
        break;
 518:	08 95       	ret
    case PORT_D:
        CLR_BIT(DDRD, pinNum);
 51a:	21 b3       	in	r18, 0x11	; 17
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_pullUp+0x82>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_pullUp+0x7e>
 52a:	98 2f       	mov	r25, r24
 52c:	90 95       	com	r25
 52e:	92 23       	and	r25, r18
 530:	91 bb       	out	0x11, r25	; 17
        SET_BIT(PORTD, pinNum);
 532:	92 b3       	in	r25, 0x12	; 18
 534:	89 2b       	or	r24, r25
 536:	82 bb       	out	0x12, r24	; 18
}

EN_ERRORSTATE_t DIO_pullUp(EN_portType_t portNum, u8_t pinNum)
{
    EN_ERRORSTATE_t state;
    state = E_OK;
 538:	81 e0       	ldi	r24, 0x01	; 1
        SET_BIT(PORTC, pinNum);
        break;
    case PORT_D:
        CLR_BIT(DDRD, pinNum);
        SET_BIT(PORTD, pinNum);
        break;
 53a:	08 95       	ret
    default:
        state = E_ERROR;
 53c:	80 e0       	ldi	r24, 0x00	; 0
        break;
    }
    return state;
}
 53e:	08 95       	ret

00000540 <Enable_INT1>:
Read/Write R/W R/W R/W R/W R/W R/W R/W R/W
Initial Value 0 0 0 0 0 0 0 0
Table 34. Interrupt 1 Sense Control
ISC11 ISC10 Description
0 		0 	The low level of INT1 generates an interrupt request.
0 		1 	Any logical change on INT1 generates an interrupt request.
 540:	9f b7       	in	r25, 0x3f	; 63
 542:	90 68       	ori	r25, 0x80	; 128
 544:	9f bf       	out	0x3f, r25	; 63
1 		0 	The falling edge of INT1 generates an interrupt request.
 546:	9b b7       	in	r25, 0x3b	; 59
 548:	90 68       	ori	r25, 0x80	; 128
 54a:	9b bf       	out	0x3b, r25	; 59
1 		1 	The rising edge of INT1 generates an interrupt request*/
 54c:	81 11       	cpse	r24, r1
 54e:	08 c0       	rjmp	.+16     	; 0x560 <Enable_INT1+0x20>
EN_ERRORSTATE_t Enable_INT1(u8_t INT_STATE)
{
 550:	85 b7       	in	r24, 0x35	; 53
 552:	8b 7f       	andi	r24, 0xFB	; 251
 554:	85 bf       	out	0x35, r24	; 53
	SET_BIT(SREG,INT_EN);
 556:	85 b7       	in	r24, 0x35	; 53
 558:	88 60       	ori	r24, 0x08	; 8
 55a:	85 bf       	out	0x35, r24	; 53
	}
	else if(INT_STATE == INT_RISING)
	{
		SET_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
	}
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	08 95       	ret
1 		1 	The rising edge of INT1 generates an interrupt request*/
EN_ERRORSTATE_t Enable_INT1(u8_t INT_STATE)
{
	SET_BIT(SREG,INT_EN);
	SET_BIT(GICR,INT1);
	if(INT_STATE == INT_FAILING)
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	41 f4       	brne	.+16     	; 0x574 <Enable_INT1+0x34>
	{
		CLR_BIT(MCUCR,ISC10);
 564:	85 b7       	in	r24, 0x35	; 53
 566:	84 60       	ori	r24, 0x04	; 4
 568:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC11);
 56a:	85 b7       	in	r24, 0x35	; 53
 56c:	88 60       	ori	r24, 0x08	; 8
 56e:	85 bf       	out	0x35, r24	; 53
	}
	else if(INT_STATE == INT_RISING)
	{
		SET_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
	}
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret
		CLR_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
	}
	else if(INT_STATE == INT_RISING)
	{
		SET_BIT(MCUCR,ISC10);
 574:	80 e0       	ldi	r24, 0x00	; 0
		SET_BIT(MCUCR,ISC11);
	}
	else if (INT_STATE == INT_LOGIC_CHANGE)
 576:	08 95       	ret

00000578 <TIMER2_init>:
*/
extern EN_ERRORSTATE_t TIMER2_Get_Ticktime(uint8_t *PTR_ticktime)
{
	*PTR_ticktime = TCNT2;
	return E_OK;
}
 578:	fc 01       	movw	r30, r24
 57a:	91 81       	ldd	r25, Z+1	; 0x01
 57c:	91 30       	cpi	r25, 0x01	; 1
 57e:	a9 f0       	breq	.+42     	; 0x5aa <TIMER2_init+0x32>
 580:	28 f0       	brcs	.+10     	; 0x58c <TIMER2_init+0x14>
 582:	92 30       	cpi	r25, 0x02	; 2
 584:	f1 f0       	breq	.+60     	; 0x5c2 <TIMER2_init+0x4a>
 586:	93 30       	cpi	r25, 0x03	; 3
 588:	c1 f1       	breq	.+112    	; 0x5fa <TIMER2_init+0x82>
 58a:	53 c0       	rjmp	.+166    	; 0x632 <TIMER2_init+0xba>
 58c:	85 b5       	in	r24, 0x25	; 37
 58e:	8f 7b       	andi	r24, 0xBF	; 191
 590:	85 bd       	out	0x25, r24	; 37
 592:	85 b5       	in	r24, 0x25	; 37
 594:	87 7f       	andi	r24, 0xF7	; 247
 596:	85 bd       	out	0x25, r24	; 37
 598:	83 81       	ldd	r24, Z+3	; 0x03
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	09 f0       	breq	.+2      	; 0x5a0 <TIMER2_init+0x28>
 59e:	4b c0       	rjmp	.+150    	; 0x636 <TIMER2_init+0xbe>
 5a0:	89 b7       	in	r24, 0x39	; 57
 5a2:	80 64       	ori	r24, 0x40	; 64
 5a4:	89 bf       	out	0x39, r24	; 57
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	08 95       	ret
 5aa:	85 b5       	in	r24, 0x25	; 37
 5ac:	88 60       	ori	r24, 0x08	; 8
 5ae:	85 bd       	out	0x25, r24	; 37
 5b0:	83 81       	ldd	r24, Z+3	; 0x03
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <TIMER2_init+0x40>
 5b6:	41 c0       	rjmp	.+130    	; 0x63a <TIMER2_init+0xc2>
 5b8:	89 b7       	in	r24, 0x39	; 57
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	89 bf       	out	0x39, r24	; 57
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	08 95       	ret
 5c2:	85 b5       	in	r24, 0x25	; 37
 5c4:	88 64       	ori	r24, 0x48	; 72
 5c6:	85 bd       	out	0x25, r24	; 37
 5c8:	84 81       	ldd	r24, Z+4	; 0x04
 5ca:	81 11       	cpse	r24, r1
 5cc:	08 c0       	rjmp	.+16     	; 0x5de <TIMER2_init+0x66>
 5ce:	85 b5       	in	r24, 0x25	; 37
 5d0:	8f 7e       	andi	r24, 0xEF	; 239
 5d2:	85 bd       	out	0x25, r24	; 37
 5d4:	85 b5       	in	r24, 0x25	; 37
 5d6:	8f 7d       	andi	r24, 0xDF	; 223
 5d8:	85 bd       	out	0x25, r24	; 37
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	08 95       	ret
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	29 f4       	brne	.+10     	; 0x5ec <TIMER2_init+0x74>
 5e2:	85 b5       	in	r24, 0x25	; 37
 5e4:	80 62       	ori	r24, 0x20	; 32
 5e6:	85 bd       	out	0x25, r24	; 37
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	08 95       	ret
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	39 f5       	brne	.+78     	; 0x63e <TIMER2_init+0xc6>
 5f0:	85 b5       	in	r24, 0x25	; 37
 5f2:	80 63       	ori	r24, 0x30	; 48
 5f4:	85 bd       	out	0x25, r24	; 37
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	08 95       	ret
 5fa:	85 b5       	in	r24, 0x25	; 37
 5fc:	80 64       	ori	r24, 0x40	; 64
 5fe:	85 bd       	out	0x25, r24	; 37
 600:	84 81       	ldd	r24, Z+4	; 0x04
 602:	81 11       	cpse	r24, r1
 604:	08 c0       	rjmp	.+16     	; 0x616 <TIMER2_init+0x9e>
 606:	85 b5       	in	r24, 0x25	; 37
 608:	8f 7e       	andi	r24, 0xEF	; 239
 60a:	85 bd       	out	0x25, r24	; 37
 60c:	85 b5       	in	r24, 0x25	; 37
 60e:	8f 7d       	andi	r24, 0xDF	; 223
 610:	85 bd       	out	0x25, r24	; 37
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	29 f4       	brne	.+10     	; 0x624 <TIMER2_init+0xac>
 61a:	85 b5       	in	r24, 0x25	; 37
 61c:	80 62       	ori	r24, 0x20	; 32
 61e:	85 bd       	out	0x25, r24	; 37
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	08 95       	ret
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	69 f4       	brne	.+26     	; 0x642 <TIMER2_init+0xca>
 628:	85 b5       	in	r24, 0x25	; 37
 62a:	80 63       	ori	r24, 0x30	; 48
 62c:	85 bd       	out	0x25, r24	; 37
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	08 95       	ret
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	08 95       	ret
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	08 95       	ret

00000646 <TIMER2_start>:
 646:	fc 01       	movw	r30, r24
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	91 11       	cpse	r25, r1
 64c:	03 c0       	rjmp	.+6      	; 0x654 <TIMER2_start+0xe>
 64e:	60 95       	com	r22
 650:	64 bd       	out	0x24, r22	; 36
 652:	0c c0       	rjmp	.+24     	; 0x66c <TIMER2_start+0x26>
 654:	91 30       	cpi	r25, 0x01	; 1
 656:	19 f4       	brne	.+6      	; 0x65e <TIMER2_start+0x18>
 658:	14 bc       	out	0x24, r1	; 36
 65a:	63 bd       	out	0x23, r22	; 35
 65c:	07 c0       	rjmp	.+14     	; 0x66c <TIMER2_start+0x26>
 65e:	93 30       	cpi	r25, 0x03	; 3
 660:	11 f4       	brne	.+4      	; 0x666 <TIMER2_start+0x20>
 662:	63 bd       	out	0x23, r22	; 35
 664:	03 c0       	rjmp	.+6      	; 0x66c <TIMER2_start+0x26>
 666:	92 30       	cpi	r25, 0x02	; 2
 668:	d1 f5       	brne	.+116    	; 0x6de <TIMER2_start+0x98>
 66a:	63 bd       	out	0x23, r22	; 35
 66c:	e2 81       	ldd	r30, Z+2	; 0x02
 66e:	8e 2f       	mov	r24, r30
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	91 05       	cpc	r25, r1
 676:	a8 f5       	brcc	.+106    	; 0x6e2 <TIMER2_start+0x9c>
 678:	fc 01       	movw	r30, r24
 67a:	e6 5d       	subi	r30, 0xD6	; 214
 67c:	ff 4f       	sbci	r31, 0xFF	; 255
 67e:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__tablejump2__>
 682:	85 b5       	in	r24, 0x25	; 37
 684:	8e 7f       	andi	r24, 0xFE	; 254
 686:	85 bd       	out	0x25, r24	; 37
 688:	85 b5       	in	r24, 0x25	; 37
 68a:	8d 7f       	andi	r24, 0xFD	; 253
 68c:	85 bd       	out	0x25, r24	; 37
 68e:	85 b5       	in	r24, 0x25	; 37
 690:	8b 7f       	andi	r24, 0xFB	; 251
 692:	85 bd       	out	0x25, r24	; 37
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret
 698:	85 b5       	in	r24, 0x25	; 37
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	85 bd       	out	0x25, r24	; 37
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret
 6a2:	85 b5       	in	r24, 0x25	; 37
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	85 bd       	out	0x25, r24	; 37
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	08 95       	ret
 6ac:	85 b5       	in	r24, 0x25	; 37
 6ae:	83 60       	ori	r24, 0x03	; 3
 6b0:	85 bd       	out	0x25, r24	; 37
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	85 b5       	in	r24, 0x25	; 37
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	85 bd       	out	0x25, r24	; 37
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	08 95       	ret
 6c0:	85 b5       	in	r24, 0x25	; 37
 6c2:	85 60       	ori	r24, 0x05	; 5
 6c4:	85 bd       	out	0x25, r24	; 37
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret
 6ca:	85 b5       	in	r24, 0x25	; 37
 6cc:	86 60       	ori	r24, 0x06	; 6
 6ce:	85 bd       	out	0x25, r24	; 37
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	08 95       	ret
 6d4:	85 b5       	in	r24, 0x25	; 37
 6d6:	87 60       	ori	r24, 0x07	; 7
 6d8:	85 bd       	out	0x25, r24	; 37
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	08 95       	ret
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	08 95       	ret
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret

000006e6 <TIMER2_Flag_Reset>:
 6e6:	fc 01       	movw	r30, r24
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	81 11       	cpse	r24, r1
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <TIMER2_Flag_Reset+0x12>
 6ee:	88 b7       	in	r24, 0x38	; 56
 6f0:	80 64       	ori	r24, 0x40	; 64
 6f2:	88 bf       	out	0x38, r24	; 56
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	29 f4       	brne	.+10     	; 0x706 <TIMER2_Flag_Reset+0x20>
 6fc:	88 b7       	in	r24, 0x38	; 56
 6fe:	80 68       	ori	r24, 0x80	; 128
 700:	88 bf       	out	0x38, r24	; 56
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	08 95       	ret
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret

0000070a <TIMER2_Reset>:
 70a:	14 bc       	out	0x24, r1	; 36
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret

00000710 <TIMER2_Counter_config>:
 Congif for counter interrupt no prescaler
 Input : struct config
 output : ERROR or OK
 */
 extern EN_ERRORSTATE_t TIMER2_Counter_config(Str_Timer2Configuration_t *Config_t)
 {
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	ec 01       	movw	r28, r24
	 Config_t->Mode = COUNTER_MODE;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	88 83       	st	Y, r24
	 Config_t->Ticks_Mode = NORMAL_MODE;
 71a:	19 82       	std	Y+1, r1	; 0x01
	 Config_t->Timer_Psc = F_CPU_CLOCK_TIMER_2;
 71c:	8a 83       	std	Y+2, r24	; 0x02
	 Config_t->Interrupt_Mode = INTERRUPT;
 71e:	8b 83       	std	Y+3, r24	; 0x03
	 TIMER2_Reset();
 720:	0e 94 85 03 	call	0x70a	; 0x70a <TIMER2_Reset>
	 TIMER2_init(Config_t);
 724:	ce 01       	movw	r24, r28
 726:	0e 94 bc 02 	call	0x578	; 0x578 <TIMER2_init>
	 TIMER2_start(Config_t,TIMER2_OVERFLOW);
 72a:	6f ef       	ldi	r22, 0xFF	; 255
 72c:	ce 01       	movw	r24, r28
 72e:	0e 94 23 03 	call	0x646	; 0x646 <TIMER2_start>
	 return E_OK;
 }
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <UART_init>:

u8_t UART_RxChar()
{
	while (!(UCSRA & (1 << RXC)));/* Wait till data is received */
	return(UDR);		/* Return the byte */
}
 73a:	8a b1       	in	r24, 0x0a	; 10
 73c:	88 60       	ori	r24, 0x08	; 8
 73e:	8a b9       	out	0x0a, r24	; 10
 740:	8a b1       	in	r24, 0x0a	; 10
 742:	80 61       	ori	r24, 0x10	; 16
 744:	8a b9       	out	0x0a, r24	; 10
 746:	80 b5       	in	r24, 0x20	; 32
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	80 bd       	out	0x20, r24	; 32
 74c:	80 b5       	in	r24, 0x20	; 32
 74e:	82 60       	ori	r24, 0x02	; 2
 750:	80 bd       	out	0x20, r24	; 32
 752:	80 b5       	in	r24, 0x20	; 32
 754:	84 60       	ori	r24, 0x04	; 4
 756:	80 bd       	out	0x20, r24	; 32
 758:	83 e3       	ldi	r24, 0x33	; 51
 75a:	89 b9       	out	0x09, r24	; 9
 75c:	10 bc       	out	0x20, r1	; 32
 75e:	08 95       	ret

00000760 <UART_TxChar>:
 760:	5d 9b       	sbis	0x0b, 5	; 11
 762:	fe cf       	rjmp	.-4      	; 0x760 <UART_TxChar>
 764:	8c b9       	out	0x0c, r24	; 12
 766:	08 95       	ret

00000768 <UART_SendString>:

void UART_SendString(char *str)
{
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	8c 01       	movw	r16, r24
	unsigned char j=0;
 770:	c0 e0       	ldi	r28, 0x00	; 0

	while (str[j]!=0)		/* Send string till null */
 772:	03 c0       	rjmp	.+6      	; 0x77a <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);
 774:	0e 94 b0 03 	call	0x760	; 0x760 <UART_TxChar>
		j++;
 778:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
 77a:	f8 01       	movw	r30, r16
 77c:	ec 0f       	add	r30, r28
 77e:	f1 1d       	adc	r31, r1
 780:	80 81       	ld	r24, Z
 782:	81 11       	cpse	r24, r1
 784:	f7 cf       	rjmp	.-18     	; 0x774 <UART_SendString+0xc>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 786:	cf 91       	pop	r28
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	08 95       	ret

0000078e <__udivmodsi4>:
 78e:	a1 e2       	ldi	r26, 0x21	; 33
 790:	1a 2e       	mov	r1, r26
 792:	aa 1b       	sub	r26, r26
 794:	bb 1b       	sub	r27, r27
 796:	fd 01       	movw	r30, r26
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <__udivmodsi4_ep>

0000079a <__udivmodsi4_loop>:
 79a:	aa 1f       	adc	r26, r26
 79c:	bb 1f       	adc	r27, r27
 79e:	ee 1f       	adc	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	a2 17       	cp	r26, r18
 7a4:	b3 07       	cpc	r27, r19
 7a6:	e4 07       	cpc	r30, r20
 7a8:	f5 07       	cpc	r31, r21
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__udivmodsi4_ep>
 7ac:	a2 1b       	sub	r26, r18
 7ae:	b3 0b       	sbc	r27, r19
 7b0:	e4 0b       	sbc	r30, r20
 7b2:	f5 0b       	sbc	r31, r21

000007b4 <__udivmodsi4_ep>:
 7b4:	66 1f       	adc	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	1a 94       	dec	r1
 7be:	69 f7       	brne	.-38     	; 0x79a <__udivmodsi4_loop>
 7c0:	60 95       	com	r22
 7c2:	70 95       	com	r23
 7c4:	80 95       	com	r24
 7c6:	90 95       	com	r25
 7c8:	9b 01       	movw	r18, r22
 7ca:	ac 01       	movw	r20, r24
 7cc:	bd 01       	movw	r22, r26
 7ce:	cf 01       	movw	r24, r30
 7d0:	08 95       	ret

000007d2 <__tablejump2__>:
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	05 90       	lpm	r0, Z+
 7d8:	f4 91       	lpm	r31, Z
 7da:	e0 2d       	mov	r30, r0
 7dc:	09 94       	ijmp

000007de <__itoa_ncheck>:
 7de:	bb 27       	eor	r27, r27
 7e0:	4a 30       	cpi	r20, 0x0A	; 10
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <__itoa_ncheck+0x12>
 7e4:	99 23       	and	r25, r25
 7e6:	22 f4       	brpl	.+8      	; 0x7f0 <__itoa_ncheck+0x12>
 7e8:	bd e2       	ldi	r27, 0x2D	; 45
 7ea:	90 95       	com	r25
 7ec:	81 95       	neg	r24
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__utoa_common>

000007f4 <__utoa_ncheck>:
 7f4:	bb 27       	eor	r27, r27

000007f6 <__utoa_common>:
 7f6:	fb 01       	movw	r30, r22
 7f8:	55 27       	eor	r21, r21
 7fa:	aa 27       	eor	r26, r26
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	aa 1f       	adc	r26, r26
 802:	a4 17       	cp	r26, r20
 804:	10 f0       	brcs	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	a4 1b       	sub	r26, r20
 808:	83 95       	inc	r24
 80a:	50 51       	subi	r21, 0x10	; 16
 80c:	b9 f7       	brne	.-18     	; 0x7fc <__utoa_common+0x6>
 80e:	a0 5d       	subi	r26, 0xD0	; 208
 810:	aa 33       	cpi	r26, 0x3A	; 58
 812:	08 f0       	brcs	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	a9 5d       	subi	r26, 0xD9	; 217
 816:	a1 93       	st	Z+, r26
 818:	00 97       	sbiw	r24, 0x00	; 0
 81a:	79 f7       	brne	.-34     	; 0x7fa <__utoa_common+0x4>
 81c:	b1 11       	cpse	r27, r1
 81e:	b1 93       	st	Z+, r27
 820:	11 92       	st	Z+, r1
 822:	cb 01       	movw	r24, r22
 824:	0c 94 14 04 	jmp	0x828	; 0x828 <strrev>

00000828 <strrev>:
 828:	dc 01       	movw	r26, r24
 82a:	fc 01       	movw	r30, r24
 82c:	67 2f       	mov	r22, r23
 82e:	71 91       	ld	r23, Z+
 830:	77 23       	and	r23, r23
 832:	e1 f7       	brne	.-8      	; 0x82c <strrev+0x4>
 834:	32 97       	sbiw	r30, 0x02	; 2
 836:	04 c0       	rjmp	.+8      	; 0x840 <strrev+0x18>
 838:	7c 91       	ld	r23, X
 83a:	6d 93       	st	X+, r22
 83c:	70 83       	st	Z, r23
 83e:	62 91       	ld	r22, -Z
 840:	ae 17       	cp	r26, r30
 842:	bf 07       	cpc	r27, r31
 844:	c8 f3       	brcs	.-14     	; 0x838 <strrev+0x10>
 846:	08 95       	ret

00000848 <_exit>:
 848:	f8 94       	cli

0000084a <__stop_program>:
 84a:	ff cf       	rjmp	.-2      	; 0x84a <__stop_program>
