
Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b03  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000767  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b0  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ba  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	9b 00       	.word	0x009b	; ????
  56:	a6 00       	.word	0x00a6	; ????
  58:	ab 00       	.word	0x00ab	; ????
  5a:	b0 00       	.word	0x00b0	; ????
  5c:	b5 00       	.word	0x00b5	; ????
  5e:	ba 00       	.word	0x00ba	; ????
  60:	bf 00       	.word	0x00bf	; ????
  62:	c4 00       	.word	0x00c4	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a6 36       	cpi	r26, 0x66	; 102
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <app_init>:
u8_t flag = 0;

 
 
void app_init(void)
{
  8c:	08 95       	ret

0000008e <app_start>:
	
}


void app_start(void)
{
  8e:	08 95       	ret

00000090 <__vector_11>:

}


ISR(TIMER0_OVF)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	flag ++;
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TIMER0_Flag_Reset(&timer0app);
  bc:	81 e6       	ldi	r24, 0x61	; 97
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 cd 00 	call	0x19a	; 0x19a <TIMER0_Flag_Reset>
	TIMER0_start(&timer0app,TIMER0_OVERFLOW);
  c4:	6f ef       	ldi	r22, 0xFF	; 255
  c6:	81 e6       	ldi	r24, 0x61	; 97
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 7d 00 	call	0xfa	; 0xfa <TIMER0_start>
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:
#include "Application/Application.h"


int main(void)
{
	app_init();
  f0:	0e 94 46 00 	call	0x8c	; 0x8c <app_init>
	
	while (1)
	{
		app_start();
  f4:	0e 94 47 00 	call	0x8e	; 0x8e <app_start>
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <main+0x4>

000000fa <TIMER0_start>:
	else
	{
		return E_ERROR;
	}
	return E_OK;
}
  fa:	fc 01       	movw	r30, r24
  fc:	91 81       	ldd	r25, Z+1	; 0x01
  fe:	91 11       	cpse	r25, r1
 100:	03 c0       	rjmp	.+6      	; 0x108 <TIMER0_start+0xe>
 102:	60 95       	com	r22
 104:	62 bf       	out	0x32, r22	; 50
 106:	0c c0       	rjmp	.+24     	; 0x120 <TIMER0_start+0x26>
 108:	91 30       	cpi	r25, 0x01	; 1
 10a:	19 f4       	brne	.+6      	; 0x112 <TIMER0_start+0x18>
 10c:	12 be       	out	0x32, r1	; 50
 10e:	6c bf       	out	0x3c, r22	; 60
 110:	07 c0       	rjmp	.+14     	; 0x120 <TIMER0_start+0x26>
 112:	93 30       	cpi	r25, 0x03	; 3
 114:	11 f4       	brne	.+4      	; 0x11a <TIMER0_start+0x20>
 116:	6c bf       	out	0x3c, r22	; 60
 118:	03 c0       	rjmp	.+6      	; 0x120 <TIMER0_start+0x26>
 11a:	92 30       	cpi	r25, 0x02	; 2
 11c:	d1 f5       	brne	.+116    	; 0x192 <TIMER0_start+0x98>
 11e:	6c bf       	out	0x3c, r22	; 60
 120:	e2 81       	ldd	r30, Z+2	; 0x02
 122:	8e 2f       	mov	r24, r30
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	91 05       	cpc	r25, r1
 12a:	a8 f5       	brcc	.+106    	; 0x196 <TIMER0_start+0x9c>
 12c:	fc 01       	movw	r30, r24
 12e:	e6 5d       	subi	r30, 0xD6	; 214
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	0c 94 df 00 	jmp	0x1be	; 0x1be <__tablejump2__>
 136:	83 b7       	in	r24, 0x33	; 51
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	83 bf       	out	0x33, r24	; 51
 13c:	83 b7       	in	r24, 0x33	; 51
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	83 bf       	out	0x33, r24	; 51
 142:	83 b7       	in	r24, 0x33	; 51
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	83 bf       	out	0x33, r24	; 51
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	83 bf       	out	0x33, r24	; 51
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
 156:	83 b7       	in	r24, 0x33	; 51
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	83 bf       	out	0x33, r24	; 51
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret
 160:	83 b7       	in	r24, 0x33	; 51
 162:	83 60       	ori	r24, 0x03	; 3
 164:	83 bf       	out	0x33, r24	; 51
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	83 bf       	out	0x33, r24	; 51
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
 174:	83 b7       	in	r24, 0x33	; 51
 176:	85 60       	ori	r24, 0x05	; 5
 178:	83 bf       	out	0x33, r24	; 51
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	86 60       	ori	r24, 0x06	; 6
 182:	83 bf       	out	0x33, r24	; 51
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
 188:	83 b7       	in	r24, 0x33	; 51
 18a:	87 60       	ori	r24, 0x07	; 7
 18c:	83 bf       	out	0x33, r24	; 51
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret

0000019a <TIMER0_Flag_Reset>:
Input : Configuration and value to set
output : ERROR or OK
*/
extern EN_ERRORSTATE_t TIMER0_Flag_Reset(Str_Timer0Configuration_t *Config_t)
{
	if (Config_t->Ticks_Mode == NORMAL_MODE)
 19a:	fc 01       	movw	r30, r24
 19c:	81 81       	ldd	r24, Z+1	; 0x01
 19e:	81 11       	cpse	r24, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <TIMER0_Flag_Reset+0x12>
	{
		TIFR |= (1 << TOV0);
 1a2:	88 b7       	in	r24, 0x38	; 56
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	88 bf       	out	0x38, r24	; 56
	}
	else
	{
		return E_ERROR;
	}
	return E_OK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
{
	if (Config_t->Ticks_Mode == NORMAL_MODE)
	{
		TIFR |= (1 << TOV0);
	}
	else if (Config_t->Ticks_Mode == CTC_MODE)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	29 f4       	brne	.+10     	; 0x1ba <TIMER0_Flag_Reset+0x20>
	{
		TIFR |= (1 << OCF0);
 1b0:	88 b7       	in	r24, 0x38	; 56
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	88 bf       	out	0x38, r24	; 56
	}
	else
	{
		return E_ERROR;
	}
	return E_OK;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
	{
		TIFR |= (1 << OCF0);
	}
	else
	{
		return E_ERROR;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_OK;
}
 1bc:	08 95       	ret

000001be <__tablejump2__>:
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	05 90       	lpm	r0, Z+
 1c4:	f4 91       	lpm	r31, Z
 1c6:	e0 2d       	mov	r30, r0
 1c8:	09 94       	ijmp

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
